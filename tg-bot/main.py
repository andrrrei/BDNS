#!/usr/bin/python3.3
import threading, telebot, schedule, main, time
import os, sys
from telebot import types
from telegram.constants import ParseMode
import for_json
import admin

bot = telebot.TeleBot("TOKEN")

@bot.message_handler(commands=['restart'])
@admin.admin_command
def restart_bot(message):
    admin.send_admin_message('bye')
    os.execv(sys.executable, ['python'] + sys.argv)


@bot.message_handler(commands=['start', 'help'])
def start(message):
    text = "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª—é–¥–µ–π, —Å–æ—Å—Ç–æ—è—â–∏—Ö –≤ –±–ª–æ–∫–µ –ë–î–ù–°"
    if for_json.has_access(message.from_user.id):
        text = "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–±—è:\
            \n/run - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–∫—Ä–∏–ø—Ç\
            \n/file - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º\
            \n/debug - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º"
        send_message(message.from_user.id, text)

    if admin.is_admin(message):
        text = "–ò –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞:\
            \n/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\
            \n/access - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–∞\
            \n/access <i>id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i> <i>-1/0/1</i> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        admin.send_admin_message(text)

    return


@bot.message_handler(commands=['access'])
def request_access(message):
    if admin.is_admin(message):
        admin.admin_access(message)
        return

    if for_json.return_info(message.from_user.id) != None:
        state = for_json.return_info(message.from_user.id)["state"]
        if state == 1:
            text = "–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!"
        elif state == -1:
            text = "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!"
        else:
            text = "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ"

        send_message(message.from_user.id, text)
        return

    for_json.save_user(message)
    send_message(message.from_user.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    text = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç: @{} \nid: <code>{}</code>".format(message.from_user.username,
                                                                 message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="(access)#1#" + str(message.from_user.id)),
               types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data="(access)#-1#" + str(message.from_user.id)))

    admin.send_admin_message(text, markup)

    return

@bot.callback_query_handler(func=lambda call: "(access)" in call.data)
def give_access(call):
    tmp, state, id = call.data.split("#")
    state = int(state)

    markup = types.InlineKeyboardMarkup()
    text = ""

    if state == 1:
        text = "‚úÖ –î–æ—Å—Ç—É–ø @{} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!".format(for_json.return_info(id)["username"])
        markup.add(types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data="(access)#-1#" + id))
    else:
        text = "‚ùå –í –¥–æ—Å—Ç—É–ø–µ @{} –æ—Ç–∫–∞–∑–∞–Ω–æ!".format(for_json.return_info(id)["username"])
        markup.add(types.InlineKeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="(access)#1#" + id))

    for_json.change_state(id, state)

    bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=text,
                              parse_mode=ParseMode.HTML,
                              reply_markup=markup)

    return


@bot.message_handler(commands=['run']) # send list of scripts
def run(message):
    if not for_json.has_access(message.from_user.id):
        send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤.")
        return

    # print(os.path.dirname(os.path.abspath(__file__)))
    dir = os.getcwd() + "/scripts"
    files = os.listdir(dir)

    markup = types.InlineKeyboardMarkup()
    for i in files:
        if ".py" not in i:
            continue
        markup.add(types.InlineKeyboardButton(text=i, callback_data="(run)#" + i))

    send_message(message.from_user.id, "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", markup)

    return


@bot.callback_query_handler(func=lambda call: "(run)" in call.data)
def run_program(call):
    # print(os.path.dirname(os.path.abspath(__file__)))
    dir = os.getcwd() + "/scripts/" + call.data.split('#')[1]

    os.system('python3 ' + dir)

    bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, 
                              text='üöÄ –ë—ã–ª –∑–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª <code>{}</code>!'.format(call.data.split('#')[1]), 
                              parse_mode=ParseMode.HTML)

    return




@bot.message_handler(commands=['file', 'debug']) # send list of files
def file(message):
    if not for_json.has_access(message.from_user.id):
        send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤.")
        return

    dir = ""

    if "debug" in message.text:
        dir = os.getcwd() + "/scripts/debug/"
    else:
        dir = os.getcwd() + "/scripts/files/"

    files = os.listdir(dir)

    send_message(message.from_user.id, "–í–æ—Ç –≤–∞—à–∏ —Ñ–∞–π–ª—ã:")

    for path in files:
        path = dir + path
        with open(path, 'rb') as file: 
            send_document(message.from_user.id, file)

    return


@bot.message_handler(commands=['nohup']) # send logs
def nohup(message):
    if not for_json.has_access(message.from_user.id):
        send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ —ç—Ç–æ –ø—Ä–∞–≤.")
        return

    dir = os.getcwd() + "/nohup.out"
    
    files = os.listdir(dir)

    send_message(message.from_user.id, "–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª –ª–æ–≥–æ–≤:")
    send_document(message.from_user.id, file)

    return

def send_message(id, text, markup=None):
    try:
        bot.send_message(chat_id=id, text=text, parse_mode=ParseMode.HTML, disable_web_page_preview=True, reply_markup=markup)
    except Exception as e:
        time.sleep(5)
        try:
            bot.send_message(chat_id=id, text=text, parse_mode=ParseMode.HTML, disable_web_page_preview=True, reply_markup=markup)
        except Exception as e:
            text_error = 'Error from user: @{} <code>{}</code>\n{}'.format(for_json.return_info(id)["username"], id, str(e))
            admin.send_admin_message(text_error)
            print(id, e)

    return

def send_document(id, file, text = '', markup=None):
    try:
        bot.send_document(id, file, caption=text, reply_markup=markup)
    except Exception as e:
        time.sleep(5)
        try:
            bot.send_document(id, file, caption=text, reply_markup=markup)
        except Exception as e:
            text_error = 'Error from user: <code>{}</code>\n{}'.format(id, str(e))
            admin.send_admin_message(text_error)
            print(id, e)

    return


if __name__ == '__main__':
    admin.send_admin_message('–Ø –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è!')
    print("-------------------------")

    schedule.every().day.at("18:00").do(os.system, 'python3 ' + os.getcwd() + "/scripts/stat_base.py") # –¥–ª—è –æ–±—Å–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤

    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(5)
        except Exception as e:
            print(e)
            time.sleep(10)
